name: 'check'
description: 'Performs check'
inputs:
  check:
    required: true
    description: 'Check to be performed. Value to be provided in scheme:input format where scheme can be - npm, compose.'
  image:
    required: true
    description: 'Image against which check will be performed'
  aws_use_ecr:
    required: false
    description: 'Whether or not ECR login is required. If enabled, provided AWS credentials will be used to authenticating with docker registry.'
  aws_access_key_id:
    required: false
    description: 'Access key ID for AWS. Required if login using ECR is enabled.'
  aws_secret_access_key:
    required: false
    description: 'Access key Secret for AWS. Required if login using ECR is enabled.'
  aws_region:
    required: false
    description: 'Region for AWS. Required if login using ECR is enabled.'
  docker_registry:
    required: false
    description: 'Docker registry where build images would be pushed and pulled from'
  docker_username:
    required: false
    description: 'Username for authenticating with provided docker registry'
  docker_password:
    required: false
    description: 'Password for authenticating with provided docker registry'
  tag:
    required: false
    description: 'If provided, can be used for tagging the image'
runs:
  using: composite
  steps:
    - name: Process check
      id: check
      shell: bash
      env:
        CHECK: ${{ inputs.check }}
      run: |
        echo "Processing check: $CHECK"
        echo "::set-output name=scheme::${CHECK%:*}"
        echo "::set-output name=input::${CHECK#*:}"

    - name: Debug Docker setup
      shell: bash
      run: |
        echo "Setting up Docker..."

    - name: Docker setup
      uses: docker/setup-buildx-action@v2

    - name: Debug Docker login
      shell: bash
      run: |
        echo "DOCKER_USERNAME: ${{ inputs.docker_username }}"
        echo "DOCKER_REGISTRY: ${{ inputs.docker_registry }}"

    - name: Docker login
      uses: docker/login-action@v2
      env:
        DOCKER_USERNAME: ${{ inputs.docker_username }}
      if: "${{ env.DOCKER_USERNAME != '' }}"
      with:
        registry: ${{ inputs.docker_registry }}
        username: ${{ inputs.docker_username }}
        password: ${{ inputs.docker_password }}

    - name: Debug AWS setup
      shell: bash
      run: |
        echo "AWS_USE_ECR: ${{ inputs.aws_use_ecr }}"
        echo "AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}"
        echo "AWS_REGION: ${{ inputs.aws_region }}"

    - name: AWS setup
      uses: aws-actions/configure-aws-credentials@v1
      env:
        AWS_USE_ECR: ${{ inputs.aws_use_ecr }}
      if: "${{ env.AWS_USE_ECR == 'true' }}"
      with:
        aws-access-key-id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        aws-region: ${{ inputs.aws_region }}
        mask-aws-account-id: 'false'

    - name: AWS ECR login
      env:
        AWS_USE_ECR: ${{ inputs.aws_use_ecr }}
      if: "${{ env.AWS_USE_ECR == 'true' }}"
      id: aws_ecr_login
      uses: aws-actions/amazon-ecr-login@v1

    - name: Docker pull
      shell: bash
      run: |
        echo "Pulling image: ${{ inputs.image }}"
        docker pull ${{ inputs.image }}
        docker tag ${{ inputs.image }} ${{ inputs.tag }}

    # runs check using npm
    # for a check - npm:lint
    # will execute - npm run lint

    - name: Debug Run check using npm
      # if: steps.check.outputs.scheme == 'npm'
      shell: bash
      run: |
        echo "QQQQQQQQQ: ${{ steps.check.outputs.scheme }}"
        echo "WWWWWWW: ${{ steps.check }}"
        echo "EEEEEEE: ${{ steps.check.outputs }}"
        echo "Running npm check with input: ${{ steps.check.outputs.input }}"
        docker run -t ${{ inputs.image }} npm run ${{ steps.check.outputs.input }}

    - name: Run check using npm
      if: steps.check.outputs.scheme == 'npm'
      shell: bash
      run: |
        docker run -t ${{ inputs.image }} npm run ${{ steps.check.outputs.input }}

    # runs check using docker compose
    # for a check - compose:test
    # will look for compose file - docker-compose.test.yml and will run the services.
    # service named 'app' should run and exit successfully to mark the test successful
    # to reference the app's image, inputs.tag can be used

    - name: Debug Run check using compose
      if: steps.check.outputs.scheme == 'compose'
      shell: bash
      run: |
        echo "Running docker-compose check with input: ${{ steps.check.outputs.input }}"
        docker-compose -f app/docker-compose.${{ steps.check.outputs.input }}.yml up --exit-code-from app

    - name: Run check using compose
      if: steps.check.outputs.scheme == 'compose'
      shell: bash
      run: |
        docker-compose -f app/docker-compose.${{ steps.check.outputs.input }}.yml up --exit-code-from app

    - name: Coverage Report
      continue-on-error: true
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: app/output/coverage.xml
        badge: true
        fail_below_min: true
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '60 80'

    - uses: marocchino/sticky-pull-request-comment@v2
      continue-on-error: true
      with:
        recreate: true
        path: code-coverage-results.md
