name: 'check'
description: 'Performs check'
inputs:
  check:
    required: true
    description: 'Check to be performed. Value to be provided in scheme:input format where scheme can be - npm, compose.'
  image:
    required: true
    description: 'Image against which check will be performed'
  docker_registry:
    required: true
    description: 'Docker registry where build images would be pushed and pulled from'
  docker_username:
    required: true
    description: 'Username for authenticating with provided docker registry'
  docker_password:
    required: true
    description: 'Password for authenticating with provided docker registry'
  tag:
    required: false
    description: 'If provided, can be used for tagging the image'

runs:
  using: composite
  steps:
    - name: Process check
      id: check
      shell: bash
      env:
        CHECK: ${{ inputs.check }}
      run: |
        echo "::set-output name=scheme::${CHECK%:*}"
        echo "::set-output name=input::${CHECK#*:}"

    - name: Docker setup
      uses: docker/setup-buildx-action@v2

    - name: Docker login
      uses: docker/login-action@v2
      with:
        registry: ${{ inputs.docker_registry }}
        username: ${{ inputs.docker_username }}
        password: ${{ inputs.docker_password }}

    - name: Docker pull
      shell: bash
      run: |
        docker pull ${{ inputs.image }}
        docker tag ${{ inputs.image }} ${{ inputs.tag }}

    # runs check using npm
    # for a check - npm:lint
    # will execute - npm run lint

    - name: Run check using npm
      if: steps.check.outputs.scheme == 'npm'
      shell: bash
      run: |
        docker run -t ${{ inputs.image }} npm run ${{ steps.check.outputs.input }}

    # runs check using docker compose
    # for a check - compose:test
    # will look for compose file - docker-compose.test.yml and will run the services.
    # service named 'app' should run and exit successfully to mark the test successful
    # to reference the app's image, inputs.tag can be used

    - name: Run check using compose
      if: steps.check.outputs.scheme == 'compose'
      shell: bash
      run: |
        docker-compose -f app/docker-compose.${{ steps.check.outputs.input }}.yml up --exit-code-from app

    - name: Coverage Report
      continue-on-error: true
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: app/output/coverage.xml
        badge: true
        fail_below_min: true
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '60 80'

    - uses: marocchino/sticky-pull-request-comment@v2
      continue-on-error: true
      with:
        recreate: true
        path: code-coverage-results.md
