name: 'check'
description: 'Performs check'
inputs:
  check:
    required: true
    description: 'Check to be performed. Value to be provided in scheme:input format where scheme can be - npm, compose.'
  image:
    required: true
    description: 'Image against which check will be performed'
  docker_registry:
    required: true
    description: 'Docker registry where build images would be pushed and pulled from'
  docker_username:
    required: true
    description: 'Username for authenticating with provided docker registry'
  docker_password:
    required: true
    description: 'Password for authenticating with provided docker registry'
  tag:
    required: false
    description: 'If provided, can be used for tagging the image'
runs:
  using: composite
  steps:
    - name: Process check
      id: check
      shell: bash
      env:
        CHECK: ${{ inputs.check }}
      run: |
        echo "::set-output name=scheme::${CHECK%:*}"
        echo "::set-output name=input::${CHECK#*:}"

    - name: Docker setup
      uses: docker/setup-buildx-action@v2

    - name: Docker login
      uses: docker/login-action@v2
      with:
        registry: ${{ inputs.docker_registry }}
        username: ${{ inputs.docker_username }}
        password: ${{ inputs.docker_password }}

    - name: Docker pull
      shell: bash
      run: |
        docker pull ${{ inputs.image }}
        docker tag ${{ inputs.image }} ${{ inputs.tag }}

    # runs check using npm
    # for a check - npm:lint
    # will execute - npm run lint

    - name: Run check using npm
      if: steps.check.outputs.scheme == 'npm'
      shell: bash
      run: |
        docker run -t ${{ inputs.image }} npm run ${{ steps.check.outputs.input }}

    # runs check using docker compose
    # for a check - compose:test
    # will look for compose file - docker-compose.test.yml and will run the services.
    # service named 'app' should run and exit successfully to mark the test successful
    # to reference the app's image, inputs.tag can be used

    - name: Run check using compose
      if: steps.check.outputs.scheme == 'compose'
      shell: bash
      run: |
        docker-compose -f app/docker-compose.coverage.yml up --exit-code-from app

    - name: Run check using compose for code coverage
      if: steps.check.outputs.scheme == 'coverage'
      shell: bash
      run: |
        docker-compose -f app/docker-compose.${{ steps.check.outputs.scheme }}.yml up --exit-code-from app
      
    - name: Extract coverage information
      if: steps.check.outputs.scheme == 'coverage'
      id: extract_coverage
      run: |
        coverage_percentage=$(grep -oP "(?<=Statements\s+:)\s+\d+\.\d+" coverage/coverage-summary.json)
        echo "::set-output name=coverage_percentage::$coverage_percentage"

    - name: Post coverage report as a comment
      if: steps.check.outputs.scheme == 'coverage'
      uses: actions/github-script@v4
      with:
        script: |
          const context = github.context;
          const prNumber = context.payload.pull_request.number;
          const coveragePercentage = '${{ steps.extract_coverage.outputs.coverage_percentage }}';

          const message = `Test Coverage: ${coveragePercentage}%`;
          const octokit = github.getOctokit(process.env.GITHUB_TOKEN);

          octokit.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
            body: message,
          });
