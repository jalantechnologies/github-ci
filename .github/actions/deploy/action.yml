name: 'deploy'
description: 'Deploy application to Kubernetes'
inputs:
  app_name:
    required: true
    description: 'Application name based on which docker repository, doppler project and kube namespace would be selected'
  app_env:
    required: true
    description: 'Application environment based on which doppler configuration, kube namespace and kube spec files would be selected'
  app_hostname:
    required: true
    description: 'Application hostname where application would be deployed. Available placeholders - {0} Provided application environment, {1} Branch ID generated from provided branch'
  aws_access_key_id:
    required: false
    description: 'Access key ID for AWS'
  aws_secret_access_key:
    required: false
    description: 'Access key Secret for AWS'
  aws_cluster_name:
    required: false
    description: 'AWS EKS Cluster name'
  aws_region:
    required: false
    description: 'Region for AWS. Defaults to us-east-1.'
    default: 'us-east-1'
  branch:
    required: true
    description: 'Branch from which this action was run'
  deploy_id:
    required: false
    description: 'Unique identifier which can also be used for giving priority to resources created during deployment process'
  deploy_root:
    required: true
    description: 'Directory where kube deployment would look for kubernetes specification files'
  deploy_labels:
    required: false
    description: 'Can be used for tagging kube resources created during deployment process'
  deploy_image:
    required: true
    description: 'Docker image to use for deployment'
  docker_registry:
    required: false
    description: 'Docker registry where build images would be pushed and pulled from'
  docker_username:
    required: false
    description: 'Username for authenticating with provided docker registry'
  docker_password:
    required: false
    description: 'Password for authenticating with provided docker registry'
  do_access_token:
    required: false
    description: 'DigitalOcean access token'
  do_cluster_id:
    required: false
    description: 'Kubernetes cluster ID on DigitalOcean'
  doppler_token:
    required: false
    description: 'Doppler token for accessing environment variables'
outputs:
  url:
    description: 'URL where application has been deployed'
    value: ${{ steps.deploy.outputs.url }}
runs:
  using: composite
  steps:
    - name: Extract branch name
      id: extract_branch
      shell: bash
      run: |
        BRANCH_NAME=$(echo ${{ inputs.branch }} | sed -e 's/^refs\/heads\///g')
        BRANCH_HASH=$(sha1sum < <(printf '%s' $BRANCH_NAME) | cut -c -15)

        echo "##[set-output name=branch;]$(echo $BRANCH_NAME)"
        echo "##[set-output name=branch_hash;]$(echo $BRANCH_HASH)"
        echo "##[set-output name=branch_commit_hash;]$(echo $GITHUB_SHA)"
        echo "##[set-output name=branch_actor;]$(echo $GITHUB_ACTOR)"

    - name: DigitalOcean setup
      env:
        DO_ACCESS_TOKEN: ${{ inputs.do_access_token }}
      if: "${{ env.DO_ACCESS_TOKEN != '' }}"
      with:
        token: ${{ inputs.do_access_token }}
      uses: digitalocean/action-doctl@v2

    - name: DigitalOcean Kubernetes setup
      shell: bash
      env:
        DO_CLUSTER_ID: ${{ inputs.do_cluster_id }}
      if: "${{ env.DO_CLUSTER_ID != '' }}"
      run: doctl kubernetes cluster kubeconfig save $DO_CLUSTER_ID

    - name: AWS setup
      uses: aws-actions/configure-aws-credentials@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
      if: "${{ env.AWS_ACCESS_KEY_ID != '' }}"
      with:
        aws-access-key-id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        aws-region: ${{ inputs.aws_region }}
        mask-aws-account-id: 'false'

    - name: AWS Kubernetes setup
      shell: bash
      env:
        AWS_CLUSTER_NAME: ${{ inputs.aws_cluster_name }}
        AWS_REGION: ${{ inputs.aws_region }}
      if: "${{ env.AWS_CLUSTER_NAME != '' }}"
      run: aws eks update-kubeconfig --name $AWS_CLUSTER_NAME --region $AWS_REGION

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.12.0

    - name: Setup Doppler CLI
      uses: dopplerhq/cli-action@v2

    - name: Show working directory and files
      run: |
        pwd
        ls -l lib/kube/leadgenai-chart/secrets/

    - name: Apply DopplerSecret manifest
      shell: bash
      run: kubectl apply -f lib/kube/leadgenai-chart/secrets/doppler-secret.yaml

    - name: Kubernetes deploy
      shell: bash
      id: deploy
      # kube configurations can use following environment variables along with the default ones provided by GitHub action
      # https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables
      env:
        DOCKER_REGISTRY: ${{ inputs.docker_registry }}
        DOCKER_USERNAME: ${{ inputs.docker_username }}
        DOCKER_PASSWORD: ${{ inputs.docker_password }}
        DOPPLER_TOKEN: ${{ inputs.doppler_token }}
        DOPPLER_TOKEN_SECRET_NAME: doppler-${{ inputs.app_name }}-${{ inputs.app_env }}-token-secret
        DOPPLER_MANAGED_SECRET_NAME: doppler-${{ inputs.app_name }}-${{ inputs.app_env }}-managed-secret
        KUBE_ROOT: ${{ inputs.deploy_root }}
        KUBE_NS: ${{ inputs.app_name }}-${{ inputs.app_env }}
        KUBE_APP: ${{ inputs.app_name }}-${{ inputs.app_env }}-${{ steps.extract_branch.outputs.branch_hash }}
        KUBE_ENV: ${{ inputs.app_env }}
        KUBE_DEPLOYMENT_IMAGE: ${{ inputs.deploy_image }}
        KUBE_INGRESS_HOSTNAME: ${{ format(inputs.app_hostname, inputs.app_env, steps.extract_branch.outputs.branch_hash) }}
        KUBE_LABELS: gh/actor=${{ steps.extract_branch.outputs.branch_actor }} gh/commit=${{ steps.extract_branch.outputs.branch_commit_hash }} ${{ inputs.deploy_labels }}
        KUBE_DEPLOY_ID: ${{ inputs.deploy_id }}
      run: |
        helm upgrade --install $KUBE_APP $KUBE_ROOT/leadgenai-chart \
          -n $KUBE_NS --create-namespace \
          -f $KUBE_ROOT/leadgenai-chart/values-${KUBE_ENV}.yaml \
          --set image.tag=$(echo $KUBE_DEPLOYMENT_IMAGE | cut -d: -f2) \
          --set image.repository=$(echo $KUBE_DEPLOYMENT_IMAGE | cut -d: -f1) \
          --set ingressHost=$KUBE_INGRESS_HOSTNAME \
          --set deployId=$KUBE_DEPLOY_ID \
          --set gitSha=$GITHUB_SHA

        echo "##[set-output name=url;]$(echo https://$KUBE_INGRESS_HOSTNAME)"
