name: clean

on:
  workflow_call:
    inputs:
      # required
      hosting_provider:
        required: false
        type: string
        description: 'The cloud provider to use for cleanup. Options: AWS or DIGITAL_OCEAN'
        default: 'DIGITAL_OCEAN'
      app_name:
        required: true
        type: string
        description: 'Application name based on which docker repository and kube namespace would be selected'
      app_env:
        required: true
        type: string
        description: 'Application environment based on which kube namespace and kube spec files would be selected'
      branch:
        required: true
        type: string
        description: 'Branch from which this workflow was run'

      # optional
      aws_cluster_name:
        required: false
        type: string
        description: 'Kubernetes cluster name if deploying on EKS'
      aws_region:
        required: false
        type: string
        description: 'Kubernetes cluster region if deploying on EKS'
        default: 'us-east-1'
      deploy_root:
        required: false
        type: string
        description: 'Directory where deployment would look for kubernetes specification files'
        default: 'lib/kube'
      docker_registry:
        required: false
        type: string
        description: 'Docker registry where built images were pushed. By default uses Docker Hub.'
        default: registry.hub.docker.com
      docker_username:
        required: false
        type: string
        description: 'Username for authenticating with provided Docker registry'
      do_cluster_id:
        required: false
        type: string
        description: 'Kubernetes cluster ID on DigitalOcean if deploying on DOKS'

    secrets:
      aws_access_key_id:
        required: false
        description: 'Access key ID for AWS if deploying on EKS'
      aws_secret_access_key:
        required: false
        description: 'Access key Secret for AWS if deploying on EKS'
      docker_password:
        required: false
        description: 'Password for authenticating with provided Docker registry'
      do_access_token:
        required: false
        description: 'DigitalOcean access token if deploying on DOKS'

jobs:
  clean:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (app)
        uses: actions/checkout@v3
        with:
          path: app

      - name: Get workflow version
        id: ci_workflow
        run: |
          workflow_yaml=$(cat app/.github/workflows/${{ github.workflow }}.yml)
          uses_data=$(echo "$workflow_yaml" | grep 'uses:')
          tag=$(echo $uses_data | sed -n 's/.*@\(.*\)/\1/p')
          echo "##[set-output name=version;]$(echo $tag)"

      - name: Checkout (platform)
        uses: actions/checkout@v3
        with:
          repository: jalantechnologies/github-ci
          path: platform
          ref: ${{ steps.ci_workflow.outputs.version }}

      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: |
          BRANCH_NAME=$(echo ${{ inputs.branch }} | sed -e 's/^refs\/heads\///g')
          BRANCH_HASH=$(sha1sum < <(printf '%s' $BRANCH_NAME) | cut -c -15)

          echo "##[set-output name=branch;]$(echo $BRANCH_NAME)"
          echo "##[set-output name=branch_hash;]$(echo $BRANCH_HASH)"

      - name: DigitalOcean setup
        env:
          DO_ACCESS_TOKEN: ${{ secrets.do_access_token }}
        if: "${{ env.DO_ACCESS_TOKEN != '' }}"
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.do_access_token }}

      - name: DigitalOcean Kubernetes setup
        shell: bash
        env:
          DO_CLUSTER_ID: ${{ inputs.do_cluster_id }}
        if: "${{ env.DO_CLUSTER_ID != '' }}"
        run: doctl kubernetes cluster kubeconfig save $DO_CLUSTER_ID


      - name: AWS setup
        uses: aws-actions/configure-aws-credentials@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
        if: "${{ env.AWS_ACCESS_KEY_ID != '' }}"
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ inputs.aws_region }}
          mask-aws-account-id: 'false'

      - name: AWS Kubernetes setup
        shell: bash
        env:
          AWS_CLUSTER_NAME: ${{ inputs.aws_cluster_name }}
          AWS_REGION: ${{ inputs.aws_region }}
        if: "${{ env.AWS_CLUSTER_NAME != '' }}"
        run: aws eks update-kubeconfig --name $AWS_CLUSTER_NAME --region $AWS_REGION

      - name: Clean DigitalOcean resources
        if: inputs.hosting_provider == 'DIGITAL_OCEAN'
        run: echo "Cleaning DigitalOcean resources..."

      - name: Clean AWS resources
        if: inputs.hosting_provider == 'AWS'
        run: echo "Cleaning AWS resources..."

      - name: Kubernetes clean
        env:
          KUBE_ROOT: app/${{ inputs.deploy_root }}
          KUBE_NS: ${{ inputs.app_name }}-${{ inputs.app_env }}
          KUBE_APP: ${{ inputs.app_name }}-${{ inputs.app_env }}-${{ steps.extract_branch.outputs.branch_hash }}
          KUBE_ENV: ${{ inputs.app_env }}
        run: |
          source platform/lib/kube/clean.sh

      - name: Authenticate - DockerHub
        id: auth_docker_hub
        env:
          DOCKER_USERNAME: ${{ inputs.docker_username }}
          DOCKER_PASSWORD: ${{ secrets.docker_password }}
        if: env.DOCKER_USERNAME != '' && inputs.docker_registry == 'registry.hub.docker.com'
        shell: bash
        run: |
          response=$(curl --location 'https://hub.docker.com/v2/users/login' \
            --header 'Content-Type: application/json' \
            --data '{
              "username": "'"$DOCKER_USERNAME"'",
              "password": "'"$DOCKER_PASSWORD"'"
            }')

          echo "::set-output name=token::$(echo $response | jq -r '.token')"

      - name: Clean - DockerHub
        env:
          DOCKER_TOKEN: ${{ steps.auth_docker_hub.outputs.token }}
        if: env.DOCKER_TOKEN != ''
        shell: bash
        run: |
          curl --location --request DELETE "https://hub.docker.com/v2/repositories/${{ inputs.docker_username }}/${{ inputs.app_name }}/tags/${{ steps.extract_branch.outputs.branch_hash }}/" \
          --header "Authorization: Bearer $DOCKER_TOKEN"